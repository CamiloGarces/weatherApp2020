{"ast":null,"code":"import transformForecast from './../services/transformForecast';\nimport transformWeather from './../services/transformWeather';\nexport const SET_CITY = 'SET_CITY';\nexport const SET_FORECAST_DATA = 'SET_FORECAST_DATA';\nexport const GET_WEATHER_CITY = 'GET_WEATHER_CITY';\nexport const SET_WEATHER_CITY = 'SET_WEATHER_CITY';\n\nconst setCity = payload => ({\n  type: SET_CITY,\n  payload\n});\n\nconst setForecastData = payload => ({\n  type: SET_FORECAST_DATA,\n  payload\n});\n\nconst getWeatherCity = payload => ({\n  type: GET_WEATHER_CITY,\n  payload\n});\n\nconst setWeatherCity = payload => ({\n  type: SET_WEATHER_CITY,\n  payload\n});\n\nconst api_key = '12965ebd8a03069ed8c8a7f40535da7d';\nconst url = 'http://api.openweathermap.org/data/2.5/forecast';\nconst url_weather = 'http://api.openweathermap.org/data/2.5/weather';\nexport const setSelectedCity = payload => {\n  return dispatch => {\n    const url_forecast = `${url}?q=${payload}&appid=${api_key}`; // activar en el estado un indicador de busqueda de datos\n\n    dispatch(setCity(payload));\n    return fetch(url_forecast).then(data => data.json()).then(WeatherData => {\n      const forecastData = transformForecast(WeatherData);\n      console.log(forecastData); //modificar el estado con el resultado de la promise (fetch)\n\n      dispatch(setForecastData({\n        city: payload,\n        forecastData\n      }));\n    });\n  };\n};\nexport const setWeather = payload => {\n  return dispatch => {\n    payload.forEach(city => {\n      dispatch(getWeatherCity(city));\n      const api_weather = `${url_weather}?q=${payload}&appId=${api_key}`;\n      fetch(api_weather).then(data => {\n        return data.json();\n      }).then(weather_data => {\n        const data = transformWeather(weather_data);\n        dispatch(setWeatherCity({\n          city,\n          weather\n        }));\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Imac/Desktop/weatherApp/wheather-app/src/actions/index.js"],"names":["transformForecast","transformWeather","SET_CITY","SET_FORECAST_DATA","GET_WEATHER_CITY","SET_WEATHER_CITY","setCity","payload","type","setForecastData","getWeatherCity","setWeatherCity","api_key","url","url_weather","setSelectedCity","dispatch","url_forecast","fetch","then","data","json","WeatherData","forecastData","console","log","city","setWeather","forEach","api_weather","weather_data","weather"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AAEA,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;;AAEP,MAAMC,OAAO,GAAGC,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEN,QAAR;AAAkBK,EAAAA;AAAlB,CAAL,CAAvB;;AACA,MAAME,eAAe,GAAGF,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEL,iBAAR;AAA2BI,EAAAA;AAA3B,CAAL,CAA/B;;AAEA,MAAMG,cAAc,GAAGH,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEJ,gBAAR;AAA0BG,EAAAA;AAA1B,CAAL,CAA9B;;AACA,MAAMI,cAAc,GAAGJ,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEH,gBAAR;AAA0BE,EAAAA;AAA1B,CAAL,CAA9B;;AAEA,MAAMK,OAAO,GAAG,kCAAhB;AACA,MAAMC,GAAG,GAAG,iDAAZ;AACA,MAAMC,WAAW,GAAG,gDAApB;AAEA,OAAO,MAAMC,eAAe,GAAGR,OAAO,IAAI;AACtC,SAAOS,QAAQ,IAAI;AACf,UAAMC,YAAY,GAAI,GAAEJ,GAAI,MAAKN,OAAQ,UAASK,OAAQ,EAA1D,CADe,CAGf;;AACAI,IAAAA,QAAQ,CAACV,OAAO,CAACC,OAAD,CAAR,CAAR;AAEA,WAAOW,KAAK,CAACD,YAAD,CAAL,CAAoBE,IAApB,CACHC,IAAI,IAAKA,IAAI,CAACC,IAAL,EADN,EAELF,IAFK,CAGHG,WAAW,IAAI;AACX,YAAMC,YAAY,GAAGvB,iBAAiB,CAACsB,WAAD,CAAtC;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EAFW,CAIX;;AACAP,MAAAA,QAAQ,CAACP,eAAe,CAAC;AAAEiB,QAAAA,IAAI,EAAEnB,OAAR;AAAiBgB,QAAAA;AAAjB,OAAD,CAAhB,CAAR;AACH,KATE,CAAP;AAWH,GAjBD;AAkBH,CAnBM;AAqBP,OAAO,MAAMI,UAAU,GAAGpB,OAAO,IAAI;AAEjC,SAAOS,QAAQ,IAAI;AACfT,IAAAA,OAAO,CAACqB,OAAR,CAAgBF,IAAI,IAAI;AACpBV,MAAAA,QAAQ,CAACN,cAAc,CAACgB,IAAD,CAAf,CAAR;AAEA,YAAMG,WAAW,GAAI,GAAEf,WAAY,MAAKP,OAAQ,UAASK,OAAQ,EAAjE;AACAM,MAAAA,KAAK,CAACW,WAAD,CAAL,CAAmBV,IAAnB,CAAyBC,IAAI,IAAI;AAC7B,eAAOA,IAAI,CAACC,IAAL,EAAP;AACH,OAFD,EAEGF,IAFH,CAEQW,YAAY,IAAI;AACpB,cAAMV,IAAI,GAAGnB,gBAAgB,CAAC6B,YAAD,CAA7B;AACAd,QAAAA,QAAQ,CAACL,cAAc,CAAC;AAACe,UAAAA,IAAD;AAAOK,UAAAA;AAAP,SAAD,CAAf,CAAR;AACH,OALD;AAMH,KAVD;AAWH,GAZD;AAcH,CAhBM","sourcesContent":["import transformForecast from './../services/transformForecast';\nimport transformWeather from './../services/transformWeather';\n\nexport const SET_CITY = 'SET_CITY';\nexport const SET_FORECAST_DATA = 'SET_FORECAST_DATA';\n\nexport const GET_WEATHER_CITY = 'GET_WEATHER_CITY';\nexport const SET_WEATHER_CITY = 'SET_WEATHER_CITY';\n\nconst setCity = payload => ({ type: SET_CITY, payload });\nconst setForecastData = payload => ({ type: SET_FORECAST_DATA, payload });\n\nconst getWeatherCity = payload => ({ type: GET_WEATHER_CITY, payload });\nconst setWeatherCity = payload => ({ type: SET_WEATHER_CITY, payload });    \n\nconst api_key = '12965ebd8a03069ed8c8a7f40535da7d';\nconst url = 'http://api.openweathermap.org/data/2.5/forecast';\nconst url_weather = 'http://api.openweathermap.org/data/2.5/weather';\n\nexport const setSelectedCity = payload => {\n    return dispatch => {\n        const url_forecast = `${url}?q=${payload}&appid=${api_key}`;\n\n        // activar en el estado un indicador de busqueda de datos\n        dispatch(setCity(payload));\n\n        return fetch(url_forecast).then(\n            data => (data.json())\n        ).then(\n            WeatherData => {\n                const forecastData = transformForecast(WeatherData);\n                console.log(forecastData);\n\n                //modificar el estado con el resultado de la promise (fetch)\n                dispatch(setForecastData({ city: payload, forecastData }));\n            }\n        );\n    }\n};\n\nexport const setWeather = payload => {\n\n    return dispatch => {\n        payload.forEach(city => {\n            dispatch(getWeatherCity(city));\n\n            const api_weather = `${url_weather}?q=${payload}&appId=${api_key}`;\n            fetch(api_weather).then( data => {\n                return data.json();\n            }).then(weather_data => {\n                const data = transformWeather(weather_data);\n                dispatch(setWeatherCity({city, weather }));\n            });\n        })\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}