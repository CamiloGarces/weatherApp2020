{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { SET_FORECAST_DATA, GET_WEATHER_CITY, SET_WEATHER_CITY } from './../actions';\nexport const cities = (state = {}, action) => {\n  switch (action.type) {\n    case SET_FORECAST_DATA:\n      {\n        const {\n          city,\n          forecastData\n        } = action.payload;\n        return { ...state,\n          [city]: {\n            forecastData\n          }\n        };\n      }\n\n    case GET_WEATHER_CITY:\n      {\n        const city = action.payload;\n        return { ...state,\n          [city]: {\n            weather: null\n          }\n        };\n      }\n\n    case SET_WEATHER_CITY:\n      {\n        const {\n          city,\n          weather\n        } = action.payload;\n        return { ...state,\n          [city]: {\n            weather\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\nexport const getForecastDataFromCities = createSelector((state, city) => state[city] && state[city].forecastData, forecastData => forecastData);\nexport const getWeatherCities = createSelector(state => []);","map":{"version":3,"sources":["/Users/Imac/Desktop/weatherApp/wheather-app/src/reducers/cities.js"],"names":["createSelector","SET_FORECAST_DATA","GET_WEATHER_CITY","SET_WEATHER_CITY","cities","state","action","type","city","forecastData","payload","weather","getForecastDataFromCities","getWeatherCities"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,EAA8CC,gBAA9C,QAAsE,cAAtE;AAEA,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC1C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,iBAAL;AAAwB;AACpB,cAAM;AAAEO,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAyBH,MAAM,CAACI,OAAtC;AACA,eAAO,EAAC,GAAGL,KAAJ;AAAW,WAACG,IAAD,GAAQ;AAAEC,YAAAA;AAAF;AAAnB,SAAP;AACH;;AACD,SAAKP,gBAAL;AAAuB;AACnB,cAAMM,IAAI,GAAGF,MAAM,CAACI,OAApB;AACA,eAAO,EAAE,GAAGL,KAAL;AAAY,WAACG,IAAD,GAAQ;AAAEG,YAAAA,OAAO,EAAE;AAAX;AAApB,SAAP;AACH;;AACD,SAAKR,gBAAL;AAAuB;AACnB,cAAM;AAAEK,UAAAA,IAAF;AAAQG,UAAAA;AAAR,YAAoBL,MAAM,CAACI,OAAjC;AACA,eAAO,EAAE,GAAGL,KAAL;AAAY,WAACG,IAAD,GAAQ;AAAEG,YAAAA;AAAF;AAApB,SAAP;AACH;;AACD;AACI,aAAON,KAAP;AAdR;AAgBH,CAjBM;AAmBP,OAAO,MAAMO,yBAAyB,GAC9BZ,cAAc,CAAC,CAACK,KAAD,EAAQG,IAAR,KAAiBH,KAAK,CAACG,IAAD,CAAL,IAAeH,KAAK,CAACG,IAAD,CAAL,CAAYC,YAA7C,EAA2DA,YAAY,IAAIA,YAA3E,CADf;AAGP,OAAO,MAAMI,gBAAgB,GACrBb,cAAc,CAACK,KAAK,IAAI,EAAV,CADf","sourcesContent":["import { createSelector } from 'reselect';\nimport { SET_FORECAST_DATA, GET_WEATHER_CITY, SET_WEATHER_CITY } from './../actions';\n\nexport const cities = (state = {}, action) => {\n    switch (action.type) {\n        case SET_FORECAST_DATA: {\n            const { city, forecastData } = action.payload;\n            return {...state, [city]: { forecastData }};\n        }\n        case GET_WEATHER_CITY: {\n            const city = action.payload;\n            return { ...state, [city]: { weather: null }};\n        }\n        case SET_WEATHER_CITY: {\n            const { city, weather } = action.payload;\n            return { ...state, [city]: { weather }};\n        }\n        default:\n            return state;\n    }\n}\n\nexport const getForecastDataFromCities = \n        createSelector((state, city) => state[city] && state[city].forecastData, forecastData => forecastData);\n\nexport const getWeatherCities = \n        createSelector(state => [], )        "]},"metadata":{},"sourceType":"module"}